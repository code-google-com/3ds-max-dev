//**************************************************************************/
// Copyright (c) 1998-2007 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: Appwizard generated plugin
// AUTHOR: 
//***************************************************************************/

#include "MyProceduralObject1.h"

#define MySObj2_CLASS_ID	Class_ID(0x666ec2ec, 0xa3406b50)

#define PBLOCK_REF	0

class MySObj2 : public SimpleObject2 {
	public:
		// Parameter block handled by parent

		//Class vars
		static IObjParam *ip;			//Access to the interface
		// From BaseObject
		CreateMouseCallBack* GetCreateMouseCallBack();
		
		// From Object
		BOOL HasUVW();
		void SetGenUVW(BOOL sw);
		int CanConvertToType(Class_ID obtype);
		Object* ConvertToType(TimeValue t, Class_ID obtype);
		void GetCollapseTypes(Tab<Class_ID> &clist,Tab<TSTR*> &nlist);
		int IntersectRay(TimeValue t, Ray& ray, float& at, Point3& norm);

		// From Animatable
		void BeginEditParams( IObjParam  *ip, ULONG flags,Animatable *prev);
		void EndEditParams( IObjParam *ip, ULONG flags,Animatable *next);

		// From SimpleObject
		void BuildMesh(TimeValue t);
		void InvalidateUI();

		//From Animatable
		Class_ID ClassID() {return MySObj2_CLASS_ID;}		
		SClass_ID SuperClassID() { return GEOMOBJECT_CLASS_ID; }
		void GetClassName(TSTR& s) {s = GetString(IDS_CLASS_NAME);}

		RefTargetHandle Clone( RemapDir &remap );

		//int	NumParamBlocks() { return 1; }					// return number of ParamBlocks in this instance
		//IParamBlock2* GetParamBlock(int i) { return pblock2; } // return i'th ParamBlock
		//IParamBlock2* GetParamBlockByID(BlockID id) { return (pblock2->ID() == id) ? pblock2 : NULL; } // return id'd ParamBlock

		void DeleteThis() { delete this; }		
		//Constructor/Destructor

		MySObj2();
		~MySObj2();
};



class MySObj2ClassDesc : public ClassDesc2 
{
public:
	virtual int IsPublic() 							{ return TRUE; }
	virtual void* Create(BOOL /*loading = FALSE*/) 		{ return new MySObj2(); }
	virtual const TCHAR *	ClassName() 			{ return GetString(IDS_CLASS_NAME); }
	virtual SClass_ID SuperClassID() 				{ return GEOMOBJECT_CLASS_ID; }
	virtual Class_ID ClassID() 						{ return MySObj2_CLASS_ID; }
	virtual const TCHAR* Category() 				{ return GetString(IDS_CATEGORY); }

	virtual const TCHAR* InternalName() 			{ return _T("MySObj2"); }	// returns fixed parsable name (scripter-visible name)
	virtual HINSTANCE HInstance() 					{ return hInstance; }					// returns owning module handle
	

};


ClassDesc2* GetMySObj2Desc() { 
	static MySObj2ClassDesc MySObj2Desc;
	return &MySObj2Desc; 
}





//enum { mysobj2_params };
//
//
////TODO: Add enums for various parameters
//enum { 
//	pb_spin,
//};
//
//
//
//
//static ParamBlockDesc2 mysobj2_param_blk ( mysobj2_params, _T("params"),  0, GetMySObj2Desc(), 
//	P_AUTO_CONSTRUCT + P_AUTO_UI, PBLOCK_REF, 
//	//rollout
//	IDD_PANEL, IDS_PARAMS, 0, 0, NULL,
//	// params
//	pb_spin, 			_T("spin"), 		TYPE_FLOAT, 	P_ANIMATABLE, 	IDS_SPIN, 
//		p_default, 		0.1f, 
//		p_range, 		0.0f,1000.0f, 
//		p_ui, 			TYPE_SPINNER,		EDITTYPE_FLOAT, IDC_EDIT,	IDC_SPIN, 0.01f, 
//		end,
//	end
//	);
//



IObjParam *MySObj2::ip			= NULL;

//--- MySObj2 -------------------------------------------------------

MySObj2::MySObj2()
{
	//GetMySObj2Desc()->MakeAutoParamBlocks(this);
}

MySObj2::~MySObj2()
{
}

void MySObj2::BeginEditParams(IObjParam *ip,ULONG flags,Animatable *prev)
{
	this->ip = ip;

	SimpleObject2::BeginEditParams(ip,flags,prev);
	GetMySObj2Desc()->BeginEditParams(ip, this, flags, prev);
	
	TimeValue t (0);
	this->BuildMesh(t);
	Matrix3 tm(1);
	ip->NonMouseCreate(tm);
	//suspendSnap = FALSE;
	

	// NOTE that calling NonMouseCreate() will create a copy
	// of this object and cause this object to be deleted.
	// DO NOT DO ANYTHING BUT RETURN.
	

}

void MySObj2::EndEditParams( IObjParam *ip, ULONG flags,Animatable *next )
{
	//TODO: Save plugin parameter values into class variables, if they are not hosted in ParamBlocks. 
	

	SimpleObject2::EndEditParams(ip,flags,next);
	GetMySObj2Desc()->EndEditParams(ip, this, flags, next);

	this->ip = NULL;
}

//From Object
BOOL MySObj2::HasUVW() 
{ 
	//TODO: Return whether the object has UVW coordinates or not
	return TRUE; 
}

void MySObj2::SetGenUVW(BOOL sw) 
{  
	if (sw==HasUVW()) return;
	//TODO: Set the plugin's internal value to sw				
}

//Class for interactive creation of the object using the mouse
class MySObj2CreateCallBack : public CreateMouseCallBack {
	IPoint2 sp0;		//First point in screen coordinates
	MySObj2 *ob;		//Pointer to the object 
	Point3 p0;			//First point in world coordinates
public:	
	int proc( ViewExp *vpt,int msg, int point, int flags, IPoint2 m, Matrix3& mat);
	void SetObj(MySObj2 *obj) {ob = obj;}
};

int MySObj2CreateCallBack::proc(ViewExp *vpt,int msg, int point, int flags, IPoint2 m, Matrix3& mat )
{
	//TODO: Implement the mouse creation code here
	if (msg==MOUSE_POINT||msg==MOUSE_MOVE) {
		switch(point) {
		case 0: // only happens with MOUSE_POINT msg
			ob->suspendSnap = TRUE;
			sp0 = m;
			p0 = vpt->SnapPoint(m,m,NULL,SNAP_IN_PLANE);
			mat.SetTrans(p0);
			return CREATE_STOP;
			break;
		//TODO: Add for the rest of points
		}
	} else {
		if (msg == MOUSE_ABORT) return CREATE_ABORT;
	}

	return TRUE;
}

static MySObj2CreateCallBack MySObj2CreateCB;

//From BaseObject
CreateMouseCallBack* MySObj2::GetCreateMouseCallBack() 
{
	MySObj2CreateCB.SetObj(this);
	return(&MySObj2CreateCB);
//	return NULL;
}

//From SimpleObject
void MySObj2::BuildMesh(TimeValue t)
{
	//TODO: Implement the code to build the mesh representation of the object
	//      using its parameter settings at the time passed. The plug-in should 
	//      use the data member mesh to store the built mesh.
	//      SimpleObject ivalid member should be updated. This can be done while
	//      retrieving values from pblock2.
	ivalid = FOREVER;
	float size = 1.0; //sizeLeft, sizeRight;
	/*pblock2->GetValue(Lesson6_size, t, size, ivalid );
	pblock2->GetValue(Lesson6_left, t, sizeLeft, ivalid );
	pblock2->GetValue(Lesson6_right, t, sizeRight, ivalid );*/

	mesh.setNumVerts(4);
	mesh.setNumFaces(3);
	mesh.setVert(0,size*Point3(0.0,0.0,0.0)+Point3(size,size,size)); 
	mesh.setVert(1,size*Point3(10.0,0.0,0.0)+Point3(size,size,size)); 
	mesh.setVert(2,size*Point3(0.0,10.0,0.0)+Point3(size,size,size)); 
	mesh.setVert(3,size*Point3(0.0,0.0,10.0)+Point3(size,size,size)); 

	mesh.faces[0].setVerts(0, 1, 2);
	mesh.faces[0].setEdgeVisFlags(1,1,0);
	mesh.faces[0].setSmGroup(2);
	mesh.faces[1].setVerts(3, 1, 0);
	mesh.faces[1].setEdgeVisFlags(1,1,0);
	mesh.faces[1].setSmGroup(2);
	mesh.faces[2].setVerts(0, 2, 3);
	mesh.faces[2].setEdgeVisFlags(1,1,0);
	mesh.faces[2].setSmGroup(4);
	
	mesh.InvalidateGeomCache();
}

void MySObj2::InvalidateUI() 
{
	// Hey! Update the param blocks
	pblock2->GetDesc()->InvalidateUI();
}

Object* MySObj2::ConvertToType(TimeValue t, Class_ID obtype)
{
	//TODO: If the plugin can convert to a nurbs surface then check to see 
	//      whether obtype == EDITABLE_SURF_CLASS_ID and convert the object
	//      to nurbs surface and return the object
	//      If no special conversion is needed remove this implementation.
	
	return SimpleObject::ConvertToType(t,obtype);
}

int MySObj2::CanConvertToType(Class_ID obtype)
{
	//TODO: Check for any additional types the plugin supports
	//      If no special conversion is needed remove this implementation.
	return SimpleObject::CanConvertToType(obtype);
}

// From Object
int MySObj2::IntersectRay(
		TimeValue t, Ray& ray, float& at, Point3& norm)
{
	//TODO: Return TRUE after you implement this method
	return FALSE;
}

void MySObj2::GetCollapseTypes(Tab<Class_ID> &clist,Tab<TSTR*> &nlist)
{
	Object::GetCollapseTypes(clist, nlist);
	//TODO: Append any any other collapse type the plugin supports
}

// From ReferenceTarget
RefTargetHandle MySObj2::Clone(RemapDir& remap) 
{
	MySObj2* newob = new MySObj2();	
	//TODO: Make a copy all the data and also clone all the references
	newob->ReplaceReference(0,remap.CloneRef(pblock2));
	newob->ivalid.SetEmpty();
	BaseClone(this, newob, remap);
	return(newob);
}
