#summary Documentation for the MAXScript unit testing framework maxtest
#labels Featured
#sidebar ProjectMaxtestTableOfContents

= General Introduction =
Lets start with a summary explaining the idea and purpose of maxtest. If you are familiar with unit testing you can skip this section.

Maxtest is a unit testing framework like cppunit for C++ or unittest for Python. It allows for testing MAXScript code.
The developer writes tests as MAXScript functions for validating the behavior of certain code. The framework finds these tests, runs them and returns the result back to the developer. The result of a test can be one of three states: pass, fail or error. The framework can tell the state by comparing the result the code generated with an expected result value.

The framework aims at extensibility and robustness.
It tries to achieve the former by using a class design allowing new structs to extend core functionality when adhering to an interface. This will be explained in coming sections.
The later means to run thousands of tests smoothly without crashing. Time will tell, where limits and problems will arise.


*<br/>*
= Design =
The previous section explained the purpose of maxtest. In this part, we will explain the class design driving the framework.

[http://yuml.me/edit/57ed7245 http://yuml.me/57ed7245?nonsense=something_that_ends_with.png]

Four base classes form the core of maxtest: Finder, Runner, Presenter, Assert2

The Assert2 allows for writing asserts, which when fail throw exception messages, containing information like filepath and line number. These exceptions are interpretable by the Runner. Runner depends on Assert2.

The Finders purpose is to find tests, meaning to collect the filepath, struct  and function name of a test.

The Runner knows how to validate a test. It uses the results generated by the finder and executes the tests. Whether the assert fails, passes or any other unexpected exception arises, will be recorded and returned.

The Presenter takes the Runner results and displays them back to the user.

Currently one Finder exists, the so called DirCrawler. Also one Presenter exists the ListenerPresenter and one Runner called the same way.


*<br/>*
= Test Design =
The former part explained to you how the interaction between the different framework components allow for testing. This section will show you how an actual test must be designed to be picked up and validated by the framework.

Three properties of a test decide if it will be find by maxtest.
1. The filename the test lives in.
1. The name of the struct the test lives in.
1. The name of the function the test lives in.

A test function without content would make the test pass. A test always passes if no exception got raised.
You have to use an assert provided by Assert2 to make a meaning full evaluation.
The Assert2 gets explained inside the following section.

An example for an test might look like this:
{{{
-- test_example.ms
struct TestExample
(
	function test_example =
	(
		Assert2.equals true true
	)
)
}}}


*<br/>*
= Assert2 =
The Assert2 is a struct with static functions. The Assert2 doesn't need to be instanced. It can be viewed as a struct holding utility functions, important ones though. As the name suggests its purpose it to do an assert, e.g 1 equals 1.

Currently six asserts are supported:

 * equals
{{{
Assert2.equals 1 1
}}}

 * notEquals
{{{
Assert2.notEquals 1 0
}}}

 * raises
{{{
Assert2.raises “*” testobj.testfunc args:#(1)
}}}

 * notRaises
{{{
Assert2.notRaises testobj.testfunc args:#(1)
}}}

 * assertTrue
{{{
Assert2.assertTrue (isKindOf (Sphere()) Sphere)
}}}

 * assertFalse
{{{
Assert2.assertFalse (1 != 0)
}}}


*<br/>*
= Advanced =
== setUp and tearDown ==
== DirCrawler ==
== ListenerPresenter ==


*<br/>*
= Problems =
== Assert2.raises in “on create do” ==
If you raise an exception inside the constructor (on create do) of a struct, a popup opens, stopping further execution until “OK” is pressed. This is an odd behavior as it differs from the throw() behavior outside of the constructor.
Autodesk should be notified about this and asked to remove the popup and make exceptions in constructors not create popups.

Meanwhile a workaround can be used. Use a tool like “Click Off” to automatically close the popup.
(add further instructions)

== Assert2.equals #() #() ==
Comparing two MAXScript arrays with each other doesn't work. The compare only tests the address of both arrays not their content. You have to manually assert the arrays content with each other.


*<br/>*
= Roadmap =
== Implement profiling for tests ==
Allow for logging run time of a check.
Allow for logging memory consumption of a check.

== Continues Integration ==

== Add Array Asserts ==